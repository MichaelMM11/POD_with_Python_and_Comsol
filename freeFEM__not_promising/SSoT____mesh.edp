load "msh3"
load "gmsh"

//@ - Comsol can import *.bdf-files and this is the convenient way
//@     to generate from the command line
// gmsh <inputfile>.geo -2 -o <outputfile>.vtk
// gmsh L_with_nothing.geo -2 -o b.bdf  // for Comsol

//@ - works out of the box
//mesh3 Th=readmesh3("mesh3d____wedge.mesh"); // works 3d
//mesh3 Th=readmesh3("mesh3d____cone.mesh"); // works 3d
//mesh3 Th=readmesh3("mesh3d____cylinder.mesh"); // works 3d

//@ - works 2d, maybe generated by FreeFEM?
//mesh Th = readmesh("mesh2d____export_from_where.msh");

//@ - https://community.freefem.org/t/gmsh-mesh-in-freefem/717
//@ - gmsh: export -> *.msh -> Version2 ASCII
//@ - check: save all elements (otherwise no correct mesh building)
//@ - uncheck: save parametric coordinates (because not supported from FreeFEM)
//mesh Th = gmshload("mesh2d____rectangle.msh"); // works 2d

//@ - vtk needs again special treatment
//meshS Th = vtkloadS("a.vtk");

//@ prototye mesh
//mesh Th = square(10, 10);
//mesh3 Th = cube(nn, nn, nn);
// int nn = 10;

// real L = 10.;
// real H = 10.;
// real l = 3;
// real h = 4;

// border b1(t=0, L){x=t; y=0;};
// border b2(t=0, h){x=L; y=t;};
// border b3(t=L, l){x=t; y=h;};
// border b4(t=h, H){x=l; y=t;};
// border b5(t=l, 0){x=t; y=H;};
// border b6(t=H, 0){x=0; y=t;};
// mesh Th = buildmesh(
//     b1(nn*L)
//     +b2(nn*h)
//     +b3(nn*(L-l))
//     +b4(nn*(H-h))
//     +b5(nn*l)
//     +b6(nn*H));


// int[int] lab = labels(Th);
// cout << "==============================" << endl;
// cout << "labels of mesh: " << labels(Th) << endl;
// cout << "Volume: " << Th.measure << endl;
// cout << "border area: " << Th.bordermeasure << endl;
// cout << "Number of vertices: " << Th.nv << endl;
// cout << "==============================" << endl;


//? figure out what this stands for
//@ - https://community.freefem.org/t/how-to-define-boundary-when-mesh-is-imported-from-gmsh/1054/4
// real[int] bb(6);
// boundingbox(Th,bb);
// real zmin = bb(4); 
// real eps = (bb(5)-bb(4))*0.0001; 
// Th = change(Th,flabel  =   z <= zmin+eps ? 1: 0);
plot(Th, wait=true
    //,value=true
    //,ps="likegnu.eps"
    //,fill=true
    //,cmm="comment on top left"
    //,hsv=colorhsv  //! must be defined earlier
    //,viso=viso
    //? - https://doc.freefem.org/documentation/visualization.html
    // - viso neds real[int] viso=[0.,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.];
    //     or similar
    //,wait=debug  //@ but needs "bool debug = true;""
);


// load "iovtk"
// load "medit"
// savemesh(Th, "saved_mesh.msh");  //! but cannot be loaded in gmsh

//@ save for paraview
// - https://doc.freefem.org/examples/visualization.html#exampleparaview
// int[int] Order = [1];
// string DataName = "u";
// savevtk("u.vtu",
//     Th
//     ,u
//     ,dataname=DataName
//     ,order=Order
// );
